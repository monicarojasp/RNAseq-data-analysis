---
title: "Irradiate Sporozoite"
Author: Monica L. Rojas-Pena
format: html
editor: visual
---

# **Rojas-Peña et al. 2018 Profiling gene expression of the host response to a *Plasmodium vivax* irradiated sporozoite immunization and infectious challenge**

## Summary

Here we describe whole peripheral blood gene expression profiling to contrast the contributions of the immune response to vaccine-induced and natural protection against *Plasmodium vivax-* mediated malaria. RNA-seq data analysis was performed to pre- and post-vaccination samples from 19 volunteer participants in a clinical trial investigating the efficacy of an irradiated sporozoite vaccine.

The samples sequenced in this experiment were from a randomized, single-blinded trial. Duffy positive (Fy+; Pv susceptible) individuals were enrolled: 14 received bites from irradiated (150 ± 10 cGy) Pv-infected Anopheles mosquitoes (RAS) and 7 from non-irradiated non-infected mosquitoes (Ctl) from Cali, Colombia, with a total of seven immunizations were carried out at mean intervals of nine weeks. Study is described in Arévalo-Herrera et al. (2016).

RNA-seq analysis was performed for 20 individuals (5 Duffy Fy(-) and 15 Duffy Fy(+) from Cali, Colombia) 3 Control, 5 Duffy Fy(-) and 12 *Plasmodium vivax* irradiate sporozoite (PvRAS) immunized for three of the time points, namely baseline (20 samples); pre-challenge (19 Samples) and diagnosis day (19 samples); 58 samples were sequenced.

![Figure1. The three time points represented by the green symbols: Baseline (20 samples), Prechallenge (19 Samples) and day of Diagnosis (19 samples). Controls, Fy- and Fy+ Vaccinated individuals are represented by yellow, green and blue silhouettes of representative genders on the left, and red shading on the right indicates which individuals were diagnosed with malaria. One woman (red/blue) was positive for infection but asymptomatic.](Figure1.jpg)

## Data analysis

The quality of raw RNAseq reads in Fastq files was evaluated using FastQC software.After quality control 55 RNAseq single end samples were used for subsequent analysis with an overall alignment rate of 93%. Samples were aligned to the human genome (hg19/GRCh37 assembly with the UCSC reference annotation) using Tophat2 (Trapnell et al. 2012). Transcript abundance was estimated at the level of the whole gene as counts per million-mapped-reads ( cpm) values using HTSeq (Anders et al. 2015).

Questions to answer in the analysis:

i\) Do protected and susceptible profiles in those who received Irradiated Sporozoite differ at diagnosis differ? and if so, what pathways are involved?

ii\) Do naturally (Duffy) and vaccine-protected individuals share the same profiles or are there significant differences?

iii\) Does vaccination generate a difference in gene expression between baseline and pre-challenge?

iv\) Are Duffy negative individuals distinguishable from Duffy positive at baseline?

Lets start with the analysis:

```{r}
#| echo: false

# install and load the package BiocManager package to be able to access Bioconductor packages

if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

# install and load bioconductor packages 
BiocManager::install(c('edgeR', 'limma', 'ExpressionNormalizationWorkflow', 'Biobase'))

#load all bioconductor packages at once
bioc_pck = c('edgeR', 'limma', 'ExpressionNormalizationWorkflow', 'Biobase')
lapply(bioc_pck, library, character.only=TRUE)

#Install packages from CRAN
install.packages('pacman')
pacman::p_load(ggtern, scales, tidyverse)

#load all packages at once
pck = c('ggtern','scales','tidyverse')
lapply(pck, library, character.only=TRUE)


```

Data set

```{r}
#| label: Input-data
#| echo: false
#| tidy=TRUE, 
#| tidy.opts=list(width.cutoff=80)


setwd("~/Documents/MyPublications/Irradiate sporozoite")

#Read the data
rawdata <- read.csv("rawdata_irrspz.csv", header = TRUE, row.names = 1, stringsAsFactors = T)
dim(rawdata)

head(rawdata)

metadata <- read.csv("metadata_irrspz.csv", header = TRUE, stringsAsFactors = T)
dim(metadata)

head(metadata)

```

Raw data contains 55 samples and 26428 genes distributed in three time points as follows:

```{r}
#| echo: false
metadata %>%
  group_by(Group, Timepoint) %>%
  summarize(Samples = n_distinct(Volunteer_ID))
```

**Ancestry proportions of the study participants**

Ancestry proportions of the study participants were inferred using ADMIXTURE (Alexander et al. 2009)with k=3 populations, based on common genotypes called with the GATK HaplotypeCaller in all three samples of an individual (McKenna et al. 2010), merged with the vcfmerge utility in VCF Tools (Danecek et al. 2011), and matched to the 1000 Genomes Project (Auton et al. 2015) variants with PLINK (Purcell et al. 2007). Red, blue, and olive colored circles at the corners of the triangle are representative samples from the 1000 Genomes Project and green circles are study participants. These tend to have higher African ancestry than the Medellin Colombians from the 1000 Genomes Project represented by the purple circles. The five outliers with greater than 40% African ancestry close to the left hand edge of the triangle in @fig-triangle_etnicity are the Fy negative individuals.

```{r}
#| echo: false
#| label: fig-triangle_etnicity
#| out-width: "50%"
#| fig-align: center
#| fig-cap: 
#|   - "Figure 2. Ancestry proportions of the study participants"

#Ethnicity results
ethnicity_irrspz <- read.table("Ethnicity_irrspz.txt", header=T)

ggtern(data=ethnicity_irrspz,aes(African,European,Native_American,colour,
                           colour=factor(Org))) + 
  geom_point(aes(fill = Org),size=3, shape = 21, color = "black") + 
  theme_rgbw() + 
  custom_percent("%") +
  labs(colour="Org") + 
  theme(legend.position=c(0,1),
        legend.justification=c(0,1))

```

The three axes indicate the proportion of ancestry in each individual inferred to derive from African (left), European (right) or Amerindian (East Asian: baseline) ancestry. Ancestry proportions were inferred using ADMIXTURE (Alexander et al. 2009) with k=3 populations, based on common genotypes called with the GATK HaplotypeCaller in all three samples of an individual (McKenna et al. 2010), merged with the vcf-merge utility in VCF Tools (Danecek et al. 2011), and matched to the 1000 Genomes Project (Auton et al. 2015) variants with PLINK (Purcell et al. 2007). Red, blue, and olive colored circles at the corners of the triangle are representative samples from the 1000 Genomes Project and green circles are study participants, who tend to have higher African ancestry than the Medellin Colombians from the 1000 Genomes Project represented by the purple circles, particularly the 5 outliers with greater than 40% African ancestry, who are Duffy negative.

Data exploration and quality assessment

As on of the essential steps of any data analysis, to assess the quality of the data I used box plots and density plots to observe the distribution of the raw data.

```{r}
#| echo: false
#| label: fig-distribution
#| out-width: "50%"
#| fig-align: center
#| fig-cap: 
#|   - "Figure 3. Distribution visualization of raw data"
#| fig-subcap:
#|   - "Boxplot comparing basic statistics for all genes across the samples"
#|   - "Density plot comparing count distribution of the samples"
#| layout-ncol: 2
#| column: page

##Raw data visualization: We log transform the data for better visualization, and to circumvent the negative infinity (-Inf) values (produce by log2(0) == -Inf) we create a pseudo count to the data log2(counts + 1) (this is just for the plotting code, not for the original data).

pseudoCounts = log2(rawdata + 1)

# Expression distributions visulization - boxplots
counts <- rownames_to_column(pseudoCounts, "Symbol")
counts <- pivot_longer(counts,c(-Symbol), names_to = "Sample_ID", values_to = "value")
counts <- left_join(counts, metadata, by = "Sample_ID")

#To avoid alpahbetical order in the figure
counts$Sample_ID <- factor(counts$Sample_ID, levels = unique(counts$Sample_ID), ordered = TRUE) 
counts$Timepoint <- factor(counts$Timepoint, levels = unique(counts$Timepoint), ordered = TRUE)

ggplot(counts, aes(x = Sample_ID, y = value, fill = Timepoint)) + geom_boxplot(outlier.shape = 1, outlier.size =.3, lwd=.3) + xlab("") + ylab("Log2 raw counts per million + 1") + scale_fill_manual(values = c("#FFC461","#619CFF", "#F564E3")) + theme_classic() + theme(text = element_text(size=5), axis.text.x = element_text(angle = 90)) +

# Add horizontal line that corresponds to the median logCPM
  geom_hline(yintercept = median(as.matrix(pseudoCounts)), linetype="dashed", color="red", linewidth = .2)

# Expression istributions visulization - densities

ggplot(counts, aes(x = value, colour = Timepoint)) +  geom_density() +  theme(legend.position = "right") + labs(x = "Log2 raw counts per million + 1", y = "Density")  + scale_color_manual(values = c("#FFC461","#619CFF", "#F564E3")) + theme_classic() + theme(text = element_text(size=7)) +
  
  geom_vline(xintercept = median(as.matrix(pseudoCounts)), color="red", linetype="dashed", linewidth =.2)


```

@fig-distribution left From the boxplots we see that overall the density distributions of raw log-intensities are not identical but still not very different.

@fig-distribution right Density plots provide more detail by enabling, for example, the detection of a secondary mode in the distribution. From the density plot the height of the peak doesn't matter much, shifted peaks do however as those indicate either a lower or higher amount of reads sequenced for that sample. A few things to note about this figure is that there is a big peak at exactly 0 which can be ignored, this peak consists of all 0-values (inactive genes). Now we process to filter out this low count reads.

**Filtering and normalization**

```{r}
#| label: Normalization
#| echo: False
#| fig-align: center
#| fig-cap: 
#|   - "Figure 4.  Scatterplot of the biological coefficient of variation (BCV) against the average abundance of each gene."

# First we calculate normalization factors to scale the raw library sizes.
## We filter out genes with low counts

rawdata_dge <- DGEList(counts = rawdata, group = metadata$Timepoint)

# The filterByExpr function keeps rows that have worthwhile counts in a minumum number of samples. The function accesses the group factor contained in the data (rawdata_dge) in order to compute the minimum group size, but the filtering is performed independently of which sample belongs to which group so that no bias is introduced.

# Model matrix design
id = factor(metadata[,"Sample_ID"])
tp = factor(metadata[,"Timepoint"], levels=c("Baseline", "PreChallenge", "Diagnosis"))
cho = factor(metadata[,"Challenge_outcome"], levels=c("Protected","No_protected"))
gr = factor(metadata[,"Group"], levels=c("RAS","Ctrl","Duffy"))
#design <- model.matrix(~0+tp:cho:gr+id)

# In this design, Sample_ID (id) is included in the design matrix to correct for baseline differences between the Patients.
design <- model.matrix(~0+tp+id)

keep <- filterByExpr(rawdata_dge, group = metadata$Timepoint)
rawdata_keep <- rawdata_dge[keep, , keep.lib.sizes=FALSE]

dim(rawdata_keep)

# Calculate normalization factors - normalizes the library sizes by finding a set of scaling factors for the library sizes that minimizes the log-fold changes between the samples for most genes.

rawdata_norm <- calcNormFactors(rawdata_keep) #default normalization method is TMM 

# We convert values to cpm 
normalized <- cpm(rawdata_norm,normalized.lib.size=T)
write.csv((normalized),'normalized_IrrSpz55.csv',quote=F,append=F,row.names=T,sep='\t')
normalized[normalized == -Inf] <- 0 #To remove -Inf duw to Log2(0)
write.csv(log2(normalized),'normalizedLog2_IrrSpz55.csv',quote=F,append=F,row.names=T,sep='\t')

# Biological coefficients of variation
## BCV measures the variation between the biological replicates (i.e., samples within the groups). The group information is taken into account when estimating the BCV.

rawdata.common <- estimateCommonDisp(rawdata_keep, verbose=TRUE) 
rawdata.trend <- estimateTrendedDisp(rawdata.common)
rawdata.tag <- estimateTagwiseDisp(rawdata.trend)
dim(rawdata.tag)

plotBCV(rawdata.tag, cex=0.4, main="Biological coefficient of variation (BCV) vs abundance")

```

@Normalization The vertical axis of the plotBCV plot shows square-root dispersion, also known as biological coefficient of variation (BCV). Trended and common BCV estimates are shown in blue and red, respectively. Expression values vary up and down by \~40% between samples, typically observed in RNA-Seq studies with human subjects (McCarthy et al. 2012).

After filtering the final RNA-seq data set includes Baseline, Pre-challenge and Diagnosis day time points of 55 RNA-seq single end 100bp samples with a total of 13,827 genes.

Now visualizing again the samples after filtering, we can see that the peak corresponding to low-expressed genes is successfully largely reduced in the data after filtering.

```{r}
#| echo: false
#| label: fig-distribution
#| out-width: "50%"
#| fig-align: center
#| fig-cap: 
#|   - "Figure 5. Distribution visualization of filtered raw data"
#| fig-subcap:
#|   - "Boxplot comparing basic statistics for all genes across the samples after filtering"
#|   - "Density plot comparing count distribution of the samples after filtering"
#| layout-ncol: 2
#| column: page

normalizedLog2 = data.frame(log2(normalized))
normalizedLog2[normalizedLog2 == -Inf] <- 0

# Expression distributions visulization - boxplots
counts_filter <- rownames_to_column(normalizedLog2, "Symbol")
counts_filter <- pivot_longer(counts_filter,c(-Symbol), names_to = "Sample_ID", values_to = "value")
counts_filter <- left_join(counts_filter, metadata, by = "Sample_ID")

counts_filter$Sample_ID <- factor(counts_filter$Sample_ID, levels = unique(counts_filter$Sample_ID), ordered = TRUE) #To avoid alpahbetical order

counts_filter$Timepoint <- factor(counts_filter$Timepoint, levels = unique(counts_filter$Timepoint), ordered = TRUE)

ggplot(counts_filter, aes(x = Sample_ID, y = value, fill = Timepoint)) + geom_boxplot(outlier.shape = 1, outlier.size =.3, lwd=.3) + xlab("") + ylab("Log2 raw counts per million") + scale_fill_manual(values = c("#FFC461","#619CFF", "#F564E3")) + theme_classic() + theme(text = element_text(size=5), axis.text.x = element_text(angle = 90))+ geom_hline(yintercept = median(as.matrix(normalizedLog2)), linetype="dashed", color="red", size = .3)

# Expression istributions visulization - densities

ggplot(counts_filter, aes(x = value, color = Timepoint)) +  geom_density() +  labs(x = "Log2 raw counts per million", y = "Density")  + scale_color_manual(values = c("#FFC461","#619CFF", "#F564E3")) + theme_classic() + theme(text = element_text(size=7)) + geom_vline(xintercept = median(as.matrix(normalizedLog2)), color="red", linetype= "dashed", size=.3)

  
  

```

PCA

```{r}
#| echo: false
#| label: fig-dimensions
#| out-width: "50%"
#| fig-align: center
#| fig-cap: 
#| - "Figure 5: MDS plot. Most of the samples cluster together"
#| fig-subcap:
#|   - "MDS"
#|   - "PCA"


###Plot MDS multi-dimensional scaling plot of the RNA samples (distances correspond to leading log-fold-changes between each pair of RNA samples)

metadata$Timepoint <- factor(metadata$Timepoint, levels = unique(metadata$Timepoint), ordered = TRUE) #To avoid alpahbetical order

col.timepoint <- c("#FFC461","#619CFF", "#F564E3")[metadata$Timepoint]

plotMDS(rawdata_norm, col=col.timepoint, cex=0.5)
legend("topright",fill=c("#FFC461","#619CFF", "#F564E3"),legend=levels(metadata$Timepoint),cex=0.7)



```

#Principal Component analysis of variation (PVCA)

```{r}
#| echo: false
#| message=FALSE 
#| tidy.opts=list(width.cutoff=60)

#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("ExpressionNormalizationWorkflow")

## Check: Surrogate Variable Analysis (SVA) to identify major unwanted sources of variation


#exprs <- read.table("count_normmatrix_O03Picker.csv", header=TRUE, sep=",",row.names=1, as.is=TRUE)
#covrts <- read.table("Targer_O03Picker.csv", header=TRUE, sep=",", row.names=1, as.is=TRUE)

exprs <- read.table(counts_filter, header=TRUE, sep=",", row.names=1, as.is=TRUE)
## read in the file containing the covariates
covrts <- read.table(metadata, header=TRUE, sep=",", row.names=1, as.is=TRUE)

exprs <- read.table("normalized_IrrSpz55.csv", header=TRUE, sep=",",row.names=1, as.is=TRUE)
covrts <- read.csv("metadata_irrspz.csv", header=TRUE, sep=",", row.names=1, as.is=TRUE)

inpData <- expSetobj(exprs, covrts)

#Library prep day add to metadata

cvrts_eff_var <- c("Volunteer_ID", "Timepoint", "Group","Challenge_outcome","RIN") ## Set the covariates whose effect size on the data needs to be calculated
pct_thrsh <- 0.75


pvcAnaly(inpData, pct_thrsh, cvrts_eff_var)



```

# Hierarchical clustering (Ward.D method) and Color by Study week

```{r}

#| echo: false 
#| message=FALSE
#| fig.height=16
#| fig.width=8
#| tidy=TRUE
#| tidy.opts=list(width.cutoff=60)

#With specific lables

labs = TargetFile$Library
h <- t(V_CM2$E)
rownames(h)<-labs #set new row names
hc <- hclust(dist(h),  method = "ward.D")
hc <- as.dendrogram(hc)

hc %>% set("labels_colors", as.numeric(TargetFile$Library_Prep_Date), order_value = TRUE) %>% # change color
set("labels_cex", 0.5) %>% # Change size
plot(main = "", horiz = TRUE) # plot
legend("topleft",  legend = levels(TargetFile$Library_Prep_Date), fill = c('black', 'red','green','blue', 'cyan', 'magenta'))#legend setup)


library(dendextend)
h <- t(V_CM2$E)
hc = hclust(dist(h), method = "ward.D")
hc <- as.dendrogram(hc)
hc %>% set("labels_colors", as.numeric(TargetFile$StudyWeekandOutcome), order_value = TRUE) %>% # change color
set("labels_cex", 0.5) %>% # Change size
plot(main = "", horiz = TRUE) # plot

legend("topleft",  legend = levels(TargetFile$StudyWeekandOutcome), fill = c('black', 'red','green','blue', 'cyan', 'magenta', 'yellow3'))#legend setup

```

Diferentiall expression was assessed using the linear modeling framework for RNAseq data in edgeR.

We carry out linear modeling with factors for challenge outcome, timepoint, Group and the interactions between all three. We block out individual and batch.

The idea is to organize the linear model in the following way: 1. We compare data from each timepoint to their baseline values. 2. We determine the genes that respond differently to treatment in the specific treatment groups. 3. At each treatment group, we try to identify genes that respond differently to treatment in the protected individuals, compared to unprotected and Duffy individuals.

```{r}
#| echo: false
#| message=FALSE


# Contrasts
contr.matrix <- makeContrasts(
  BSLvsPreCh = Baseline-PreChallenge,
  BSLvsDGS = Baseline-Diagnosis,
  PreChvsDGS = PreChallenge-Diagnosis,
  levels = colnames(design)
)

###Test for differential expression (âclassicâ edgeR):
de = exactTest(cds)
topTags(de)

# FDR - correct for multiple hypothesis testing:
de1 <- decideTestsDGE(de, p = 0.05, adjust = "fdr")
summary(de1)

DE.unpaired <- as.data.frame(topTags(de, n = 58)) # all DE genes
Results.unpaired <- as.data.frame(topTags(de, n = 13552)) # all results
write.csv(Results.unpaired, file = "EdgeR_unpaired_Groups.csv")

###View-Plot results
detags <- rownames(cds)[as.logical(de1)] # extract names of DE genes
plotSmear(de, de.tags = detags, cex = 0.5, main = "MA Plot unpaired edgeR")
abline(h = c(-1, 1), col = "blue")
dev.off()

###Volcano plots
plot(-log10(Results.unpaired$FDR) ~ Results.unpaired$logFC, xlab = "log2 fold change",
     ylab = "-log10 FDR", main = "Baseline vs. Diagnosis unpaired edgeR")
points(-log10(Results.unpaired$FDR[row.names(Results.unpaired) %in%
                                     row.names(DE.unpaired)]) ~ Results.unpaired$logFC[row.names(Results.unpaired)
                                                                                      %in% row.names(DE.unpaired)], col = "red", pch = 16)


```

Gene expression profiling of whole blood reveals the type and duration of the immune response to *P. vivax* infection, and highlights a subset of genes that may mediate adaptive immunity.

```{r}
sessionInfo()
```
